// Generated by gencpp from file micros_swarm_framework/MSFPPacket.msg
// DO NOT EDIT!


#ifndef MICROS_SWARM_FRAMEWORK_MESSAGE_MSFPPACKET_H
#define MICROS_SWARM_FRAMEWORK_MESSAGE_MSFPPACKET_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace micros_swarm_framework
{
template <class ContainerAllocator>
struct MSFPPacket_
{
  typedef MSFPPacket_<ContainerAllocator> Type;

  MSFPPacket_()
    : packet_source(0)
    , packet_version(0)
    , packet_type(0)
    , packet_data()
    , package_check_sum(0)  {
    }
  MSFPPacket_(const ContainerAllocator& _alloc)
    : packet_source(0)
    , packet_version(0)
    , packet_type(0)
    , packet_data(_alloc)
    , package_check_sum(0)  {
  (void)_alloc;
    }



   typedef int16_t _packet_source_type;
  _packet_source_type packet_source;

   typedef int8_t _packet_version_type;
  _packet_version_type packet_version;

   typedef int8_t _packet_type_type;
  _packet_type_type packet_type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _packet_data_type;
  _packet_data_type packet_data;

   typedef int64_t _package_check_sum_type;
  _package_check_sum_type package_check_sum;




  typedef boost::shared_ptr< ::micros_swarm_framework::MSFPPacket_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::micros_swarm_framework::MSFPPacket_<ContainerAllocator> const> ConstPtr;

}; // struct MSFPPacket_

typedef ::micros_swarm_framework::MSFPPacket_<std::allocator<void> > MSFPPacket;

typedef boost::shared_ptr< ::micros_swarm_framework::MSFPPacket > MSFPPacketPtr;
typedef boost::shared_ptr< ::micros_swarm_framework::MSFPPacket const> MSFPPacketConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::micros_swarm_framework::MSFPPacket_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::micros_swarm_framework::MSFPPacket_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace micros_swarm_framework

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/indigo/share/nav_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'micros_swarm_framework': ['/home/bas/catkin_ws_multirob/src/micros_swarm_framework/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::micros_swarm_framework::MSFPPacket_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::micros_swarm_framework::MSFPPacket_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::micros_swarm_framework::MSFPPacket_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::micros_swarm_framework::MSFPPacket_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::micros_swarm_framework::MSFPPacket_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::micros_swarm_framework::MSFPPacket_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::micros_swarm_framework::MSFPPacket_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a47802d49bd3f71134b8d47283707f92";
  }

  static const char* value(const ::micros_swarm_framework::MSFPPacket_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa47802d49bd3f711ULL;
  static const uint64_t static_value2 = 0x34b8d47283707f92ULL;
};

template<class ContainerAllocator>
struct DataType< ::micros_swarm_framework::MSFPPacket_<ContainerAllocator> >
{
  static const char* value()
  {
    return "micros_swarm_framework/MSFPPacket";
  }

  static const char* value(const ::micros_swarm_framework::MSFPPacket_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::micros_swarm_framework::MSFPPacket_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 packet_source\n\
int8 packet_version\n\
int8 packet_type\n\
string packet_data\n\
int64 package_check_sum\n\
";
  }

  static const char* value(const ::micros_swarm_framework::MSFPPacket_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::micros_swarm_framework::MSFPPacket_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.packet_source);
      stream.next(m.packet_version);
      stream.next(m.packet_type);
      stream.next(m.packet_data);
      stream.next(m.package_check_sum);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MSFPPacket_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::micros_swarm_framework::MSFPPacket_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::micros_swarm_framework::MSFPPacket_<ContainerAllocator>& v)
  {
    s << indent << "packet_source: ";
    Printer<int16_t>::stream(s, indent + "  ", v.packet_source);
    s << indent << "packet_version: ";
    Printer<int8_t>::stream(s, indent + "  ", v.packet_version);
    s << indent << "packet_type: ";
    Printer<int8_t>::stream(s, indent + "  ", v.packet_type);
    s << indent << "packet_data: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.packet_data);
    s << indent << "package_check_sum: ";
    Printer<int64_t>::stream(s, indent + "  ", v.package_check_sum);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MICROS_SWARM_FRAMEWORK_MESSAGE_MSFPPACKET_H
