// Generated by gencpp from file multirob_test/cmdPickup.msg
// DO NOT EDIT!


#ifndef MULTIROB_TEST_MESSAGE_CMDPICKUP_H
#define MULTIROB_TEST_MESSAGE_CMDPICKUP_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace multirob_test
{
template <class ContainerAllocator>
struct cmdPickup_
{
  typedef cmdPickup_<ContainerAllocator> Type;

  cmdPickup_()
    : source()
    , destination()
    , product()
    , amount(0)  {
    }
  cmdPickup_(const ContainerAllocator& _alloc)
    : source(_alloc)
    , destination(_alloc)
    , product(_alloc)
    , amount(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _source_type;
  _source_type source;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _destination_type;
  _destination_type destination;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _product_type;
  _product_type product;

   typedef int32_t _amount_type;
  _amount_type amount;




  typedef boost::shared_ptr< ::multirob_test::cmdPickup_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::multirob_test::cmdPickup_<ContainerAllocator> const> ConstPtr;

}; // struct cmdPickup_

typedef ::multirob_test::cmdPickup_<std::allocator<void> > cmdPickup;

typedef boost::shared_ptr< ::multirob_test::cmdPickup > cmdPickupPtr;
typedef boost::shared_ptr< ::multirob_test::cmdPickup const> cmdPickupConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::multirob_test::cmdPickup_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::multirob_test::cmdPickup_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace multirob_test

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'multirob_test': ['/home/bas/catkin_ws_multirob/src/multirob_test/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::multirob_test::cmdPickup_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::multirob_test::cmdPickup_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::multirob_test::cmdPickup_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::multirob_test::cmdPickup_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::multirob_test::cmdPickup_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::multirob_test::cmdPickup_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::multirob_test::cmdPickup_<ContainerAllocator> >
{
  static const char* value()
  {
    return "56424df38f10c6e3d91bcb64ba6d8fa9";
  }

  static const char* value(const ::multirob_test::cmdPickup_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x56424df38f10c6e3ULL;
  static const uint64_t static_value2 = 0xd91bcb64ba6d8fa9ULL;
};

template<class ContainerAllocator>
struct DataType< ::multirob_test::cmdPickup_<ContainerAllocator> >
{
  static const char* value()
  {
    return "multirob_test/cmdPickup";
  }

  static const char* value(const ::multirob_test::cmdPickup_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::multirob_test::cmdPickup_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string source\n\
string destination\n\
string product\n\
int32 amount\n\
";
  }

  static const char* value(const ::multirob_test::cmdPickup_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::multirob_test::cmdPickup_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.source);
      stream.next(m.destination);
      stream.next(m.product);
      stream.next(m.amount);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct cmdPickup_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::multirob_test::cmdPickup_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::multirob_test::cmdPickup_<ContainerAllocator>& v)
  {
    s << indent << "source: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.source);
    s << indent << "destination: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.destination);
    s << indent << "product: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.product);
    s << indent << "amount: ";
    Printer<int32_t>::stream(s, indent + "  ", v.amount);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MULTIROB_TEST_MESSAGE_CMDPICKUP_H
